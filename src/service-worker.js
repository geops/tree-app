/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';

const soPdfCacheString = 'so-data-v'; // IMPORTANT: This string should NEVER be changed, otherwise the old caches will not be identifyable anymore
const currentSoPdfVersion = 2; // Current SO PDF version, needs to be increased every time new PDFs are deployed
const SO_CACHE_NAME = `${soPdfCacheString}${currentSoPdfVersion}`; // Cache name for SO profile data

// Create an array of 'so-data-v[1 - currentVersion]' strings for the caches to be removed
const OLD_SO_PDF_CACHES = Array.from(Array(currentSoPdfVersion).keys()).map(
  (version) => `${soPdfCacheString}${version}`,
);

const tileCacheString = 'tree-app-tiles-v'; // IMPORTANT: This string should NEVER be changed, otherwise the old caches will not be identifyable anymore
const currentTileVersion = 22; // Current tile version, needs to be increased every time new tiles are deployed
const TILE_CACHE_NAME = `${tileCacheString}${currentTileVersion}`;

// Create an array of 'tree-app-tiles-v[1 - currentVersion]' strings for the caches to be removed
const OLD_TILE_CACHES = Array.from(Array(currentTileVersion).keys()).map(
  (version) => `${tileCacheString}${version}`,
);

const {
  REACT_APP_MATOMO_URL_BASE: matomoUrl,
  REACT_APP_VECTOR_TILES_ENDPOINT: tilesEndpoint,
  REACT_APP_SO_PDF_ENDPOINT: soPdfEndpoint,
} = process.env;

const cacheUrls = [tilesEndpoint, soPdfEndpoint];

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
// eslint-disable-next-line no-underscore-dangle
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(`${process.env.PUBLIC_URL}/index.html`),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

[...OLD_SO_PDF_CACHES, ...OLD_TILE_CACHES].forEach((OLD_CACHE) =>
  caches.delete(OLD_CACHE),
);

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(TILE_CACHE_NAME).then((cache) =>
      fetch(`${tilesEndpoint}/tiles.txt`)
        .then((response) => response.text())
        .then(async (response) => {
          const tiles = response.split(/\r?\n/);
          // eslint-disable-next-line no-plusplus
          for (let index = 0; index < tiles.length; index++) {
            const tileUrl = `${tilesEndpoint}/${tiles[index]}`;
            // eslint-disable-next-line no-await-in-loop
            if (tiles[index] && !(await cache.match(tileUrl))) {
              try {
                // eslint-disable-next-line no-await-in-loop
                const tileResponse = await fetch(tileUrl);
                cache.put(tileUrl, tileResponse);
              } catch (error) {
                // Some tiles do not exist.
              }
            }
          }
          return true;
        }),
    ),
  );
  event.waitUntil(
    caches.open(SO_CACHE_NAME).then((cache) =>
      fetch(`${soPdfEndpoint}/list.txt`)
        .then((response) => response.text())
        .then(async (response) => {
          const forestTypes = response.split(/\r?\n/);
          // eslint-disable-next-line no-plusplus
          for (let index = 0; index < forestTypes.length; index++) {
            const pdfUrl = `${soPdfEndpoint}/${forestTypes[index]}`;
            // eslint-disable-next-line no-await-in-loop
            if (forestTypes[index] && !(await cache.match(pdfUrl))) {
              try {
                // eslint-disable-next-line no-await-in-loop
                const pdfResponse = await fetch(pdfUrl);
                cache.put(pdfUrl, pdfResponse);
              } catch (error) {
                // Some PDFs do not exist.
              }
            }
          }
          return true;
        }),
    ),
  );
});

// eslint-disable-next-line no-restricted-globals
self.addEventListener('fetch', (event) => {
  const shouldFetchFromCache = cacheUrls.some((url) =>
    event.request.url.startsWith(url),
  );
  if (shouldFetchFromCache) {
    event.respondWith(
      caches
        .match(event.request)
        .then((response) => response || fetch(event.request)),
    );
  }
});

self.importScripts(`${matomoUrl}offline-service-worker.js`);
// eslint-disable-next-line no-undef
matomoAnalytics.initialize({ queueLimit: 100, timeLimit: 86400 * 2 });
